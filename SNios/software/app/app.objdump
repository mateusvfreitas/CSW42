
app.elf:     file format elf32-littlenios2
app.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000198 memsz 0x000001a4 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000158  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  00002178  00002178  00001178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000000c  000021b8  000021b8  000011b8  2**2
                  ALLOC, SMALL_DATA
  4 .comment      00000026  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000011e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000102  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000005cf  00000000  00000000  000013ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000036b  00000000  00000000  00001999  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b51  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e8  00000000  00000000  00002858  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003a3  00000000  00000000  00002940  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000de  00000000  00000000  00002ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000010  00000000  00000000  00002dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000020  00000000  00000000  00002dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00003837  2**0
                  CONTENTS, READONLY
 16 .cpu          00000003  00000000  00000000  0000383a  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  0000383d  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0000383e  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   00000004  00000000  00000000  0000383f  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    00000004  00000000  00000000  00003843  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   00000004  00000000  00000000  00003847  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 0000000a  00000000  00000000  0000384b  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 0000000b  00000000  00000000  00003855  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     0001f43b  00000000  00000000  00003860  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .text	00000000 .text
00002178 l    d  .rodata	00000000 .rodata
000021b8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00002054 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00002178 l     O .rodata	00000040 C.0.2179
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00002120 g     F .text	0000002c alt_main
00002000 g     F .entry	0000000c __reset
000021bc g     O .bss	00000004 alt_argv
0000a1b8 g       *ABS*	00000000 _gp
000020f4 g     F .text	0000002c memcpy
000021c4 g       *ABS*	00000000 __bss_end
000021c4 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00002020 g     F .text	00000038 _start
0000214c g     F .text	00000004 alt_sys_init
000020bc g     F .text	00000038 __mulsi3
000021c4 g       *ABS*	00000000 __alt_stack_base
000021b8 g       *ABS*	00000000 __bss_start
00002058 g     F .text	00000064 main
000021c0 g     O .bss	00000004 alt_envp
00002150 g     F .text	00000020 alt_irq_init
000021b8 g     O .bss	00000004 alt_argc
000021b8 g       *ABS*	00000000 _edata
000021c4 g       *ABS*	00000000 _end
00002000 g       *ABS*	00000000 __alt_mem_memory
00002170 g     F .text	00000008 altera_nios2_qsys_irq_init
0000200c g       .entry	00000000 exit
00004000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6a86e14 	ori	gp,gp,41400
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	10886e14 	ori	r2,r2,8632

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18c87114 	ori	r3,r3,8644

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2050:	00021200 	call	2120 <alt_main>

00002054 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2054:	003fff06 	br	2054 <alt_after_alt_main>

00002058 <main>:
#define LUT_SIZE 16
#define OPERATION_OFFSET 30
#define ADDRESS_OFFSET 16

int main()
{ 
    2058:	deffef04 	addi	sp,sp,-68
	int sine_lut[LUT_SIZE] = {
		0x8000,0xb0fb,0xda82,0xf641,0xffff,0xf641,0xda82,0xb0fb,
		0x8000,0x4f04,0x257d,0x09be,0x0000,0x09be,0x257d,0x4f04,
	};
    205c:	d809883a 	mov	r4,sp
    2060:	01400034 	movhi	r5,0
    2064:	29485e04 	addi	r5,r5,8568
    2068:	01801004 	movi	r6,64
#define LUT_SIZE 16
#define OPERATION_OFFSET 30
#define ADDRESS_OFFSET 16

int main()
{ 
    206c:	dfc01015 	stw	ra,64(sp)
	int sine_lut[LUT_SIZE] = {
		0x8000,0xb0fb,0xda82,0xf641,0xffff,0xf641,0xda82,0xb0fb,
		0x8000,0x4f04,0x257d,0x09be,0x0000,0x09be,0x257d,0x4f04,
	};
    2070:	00020f40 	call	20f4 <memcpy>
    2074:	02000404 	movi	r8,16
    2078:	000b883a 	mov	r5,zero
    207c:	d809883a 	mov	r4,sp
    2080:	000d883a 	mov	r6,zero
    2084:	00e00034 	movhi	r3,32768
    2088:	01c00074 	movhi	r7,1
	int atual, i=0;
	// escreve os valores do seno
	for(i=0;i<LUT_SIZE;i++) {
		IOWR(TOP_AVALON_0_BASE, 0, (2 << OPERATION_OFFSET) + (i << ADDRESS_OFFSET) + sine_lut[i]);
    208c:	20800017 	ldw	r2,0(r4)
    2090:	1885883a 	add	r2,r3,r2
    2094:	30800035 	stwio	r2,0(r6)
		0x8000,0xb0fb,0xda82,0xf641,0xffff,0xf641,0xda82,0xb0fb,
		0x8000,0x4f04,0x257d,0x09be,0x0000,0x09be,0x257d,0x4f04,
	};
	int atual, i=0;
	// escreve os valores do seno
	for(i=0;i<LUT_SIZE;i++) {
    2098:	29400044 	addi	r5,r5,1
    209c:	19c7883a 	add	r3,r3,r7
    20a0:	21000104 	addi	r4,r4,4
    20a4:	2a3ff91e 	bne	r5,r8,208c <main+0x34>
		IOWR(TOP_AVALON_0_BASE, 0, (2 << OPERATION_OFFSET) + (i << ADDRESS_OFFSET) + sine_lut[i]);
	}
	IOWR(TOP_AVALON_0_BASE, 0, (0 << OPERATION_OFFSET));
    20a8:	30000035 	stwio	zero,0(r6)
//	atual = IORD(TOP_AVALON_0_BASE, 0);
	return 0;
}
    20ac:	0005883a 	mov	r2,zero
    20b0:	dfc01017 	ldw	ra,64(sp)
    20b4:	dec01104 	addi	sp,sp,68
    20b8:	f800283a 	ret

000020bc <__mulsi3>:
    20bc:	20000a26 	beq	r4,zero,20e8 <__mulsi3+0x2c>
    20c0:	0007883a 	mov	r3,zero
    20c4:	2080004c 	andi	r2,r4,1
    20c8:	1005003a 	cmpeq	r2,r2,zero
    20cc:	2008d07a 	srli	r4,r4,1
    20d0:	1000011e 	bne	r2,zero,20d8 <__mulsi3+0x1c>
    20d4:	1947883a 	add	r3,r3,r5
    20d8:	294b883a 	add	r5,r5,r5
    20dc:	203ff91e 	bne	r4,zero,20c4 <__mulsi3+0x8>
    20e0:	1805883a 	mov	r2,r3
    20e4:	f800283a 	ret
    20e8:	0007883a 	mov	r3,zero
    20ec:	1805883a 	mov	r2,r3
    20f0:	f800283a 	ret

000020f4 <memcpy>:
    20f4:	2011883a 	mov	r8,r4
    20f8:	30000726 	beq	r6,zero,2118 <memcpy+0x24>
    20fc:	000f883a 	mov	r7,zero
    2100:	29c5883a 	add	r2,r5,r7
    2104:	11000003 	ldbu	r4,0(r2)
    2108:	41c7883a 	add	r3,r8,r7
    210c:	39c00044 	addi	r7,r7,1
    2110:	19000005 	stb	r4,0(r3)
    2114:	39bffa1e 	bne	r7,r6,2100 <memcpy+0xc>
    2118:	4005883a 	mov	r2,r8
    211c:	f800283a 	ret

00002120 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2120:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2124:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2128:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    212c:	00021500 	call	2150 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2130:	000214c0 	call	214c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2134:	d1200017 	ldw	r4,-32768(gp)
    2138:	d1600117 	ldw	r5,-32764(gp)
    213c:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2140:	dfc00017 	ldw	ra,0(sp)
    2144:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2148:	00020581 	jmpi	2058 <main>

0000214c <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
}
    214c:	f800283a 	ret

00002150 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2150:	deffff04 	addi	sp,sp,-4
    2154:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    2158:	00021700 	call	2170 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    215c:	00800044 	movi	r2,1
    2160:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2164:	dfc00017 	ldw	ra,0(sp)
    2168:	dec00104 	addi	sp,sp,4
    216c:	f800283a 	ret

00002170 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2170:	000170fa 	wrctl	ienable,zero
}
    2174:	f800283a 	ret
